<style lang="less">
  @import "../styles/base";

  .pic-wrapper {
    display:flex;
    align-items:center;
    margin: 32rpx;
    font-size: 14px;
    color: #333;
    label {
      margin-right: 40rpx;
    }
    .add, .pic {
      width: 140rpx;
      height: 140rpx;
    }
    .add {
      text-align: center;
      background: #eee;
      color: #aaa;
      font-size: 28px;
      line-height: 126rpx;
    }
  }

  .btn-submit {
    right:0;
    position:absolute;
    margin:40rpx;
  }

  .btn-custom {
    color: @themeColor !important;
    border-color: @themeColor !important;
  }

  .board-img {
    position: relative;
    .board-badge {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 160rpx;
      height: 160rpx;
      /*border-radius: 50%;*/
    }
    .canvas {
      position: absolute;
      z-index: -1;
      top: 0;
      left: 0;
      width:100%;
      height:100%;
    }
  }



  .badges {
    text-align: center;
    image {
      width: 100rpx;
      height: 100rpx;
      border-radius: 50%;
      margin-right: 20rpx;
      border: none;
      transition: border .3s ease;
      &.selected {
        border: 3px solid @themeColor;
      }
    }
  }

</style>
<template>
  <view class="page">
    <van-cell-group>
      <van-field
        value="{{ title }}"
        label="Title"
        placeholder="title"
        @input="inputTitle"
        border="{{ false }}"
      ></van-field>

      <van-field
        value="{{ place }}"
        @input="inputPlace"
        label="Place"
        icon="location-o"
        bind:click-icon="location"
        placeholder="place"
        border="{{ false }}"
      ></van-field>

      <van-cell
        title="Cat"
        value="{{selectedCat}}"
        @tap="togglePicker"
        is-link
        border="{{ false }}"
        arrow-direction="{{showPicker ? 'up' : 'down'}}"
      ></van-cell>


      <van-cell
        title="Time"
        value="{{time}}"
        @tap="toggleDatetimePicker"
        is-link
        border="{{ false }}"
        arrow-direction="{{showDatetimePicker ? 'up' : 'down'}}"
      ></van-cell>

      <view class="pic-wrapper">
        <label>Picture</label>
        <view class="add" wx:if="{{!pic}}" @tap="addPic">+</view>
        <image class="pic" wx:else src="{{pic}}"></image>
      </view>

    </van-cell-group>

    <van-button
      custom-class="btn-custom"
      class="btn-submit"
      plain type="default"
      @click="submit"
      loading="{{loading}}"
    >execute</van-button>

    <van-popup
      show="{{ showBroad }}"
      @close="toggleBroad"
    >
      <image src="{{pic}}" class="board-img">
        <image src="{{badges[selectedBadge]}}" class="board-badge"></image>
        <canvas class="canvas" canvas-id="myCanvas"></canvas>
      </image>
      <view class="badges">
        <image
          class="{{selectedBadge === index ? 'selected' : ''}}"
          wx:for="{{badges}}"
          wx:key="{{index}}"
          src="{{item}}"
          @tap="selectBadge"
          id="{{index}}"
        ></image>
      </view>
    </van-popup>

    <van-popup
      show="{{ showPicker }}"
      @close="togglePicker"
      position="bottom"
    >
      <van-picker
        columns="{{ cats }}"
        @change="selectCat"
      ></van-picker>
    </van-popup>

    <van-popup
      show="{{ showDatetimePicker }}"
      @close="toggleDatetimePicker"
      position="bottom"
    >
      <van-datetime-picker
        type="date"
        show-toolbar="{{false}}"
        value="{{ currentDate }}"
        min-date="{{ minDate }}"
        max-date="{{ maxDate }}"
        @input="selectTime"></van-datetime-picker>
    </van-popup>

    <van-toast id="van-toast"></van-toast>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { cats } from '../config'
  import Toast from '../components/vant/toast/toast'
  import { format2FullTime } from '../utils/moment'

  export default class Report extends wepy.page {
    config = {
      navigationBarTitleText: 'Report',
      usingComponents: {
        'van-field': '../components/vant/field/index',
        'van-picker': '../components/vant/picker/index',
        'van-cell-group': '../components/vant/cell-group/index',
        'van-transition': '../components/vant/transition/index',
        'van-popup': '../components/vant/popup/index',
        'van-cell': '../components/vant/cell/index',
        'van-button': '../components/vant/button/index',
        'van-toast': '../components/vant/toast/index',
        'van-datetime-picker': '../components/vant/datetime-picker/index'
      }
    }

    data = {
      badges: [
        '../images/badge1.jpg',
        '../images/badge2.jpg',
        '../images/badge3.jpg'
      ],
      cats: cats.slice(1, cats.length),
      title: '',
      place: '',
      showPicker: false,
      showDatetimePicker: false,
      showBroad: false,
      selectedCat: '',
      selectedTime: '',
      time: '',
      selectedBadge: 0,
      pic: '',
      minDate: new Date(2018, 1, 1).getTime(),
      maxDate: new Date().getTime(),
      currentDate: new Date().getTime(),
      loading: false
    }

    methods = {
      togglePicker() {
        this.showPicker = !this.showPicker
        if (!this.selectedCat) {
          this.selectedCat = cats[1]
        }
      },
      toggleDatetimePicker() {
        this.showDatetimePicker = !this.showDatetimePicker
        if (!this.selectedTime) {
          this.selectedTime = this.currentDate
          this.time = format2FullTime(this.currentDate)
        }
      },
      toggleBroad() {
        this.showBroad = !this.showBroad
      },
      selectCat(e) {
        this.selectedCat = e.detail.value
      },
      selectTime(e) {
        this.selectedTime = e.detail
        this.time = format2FullTime(e.detail)
      },
      inputPlace(e) {
        this.place = e.detail
      },
      location() {
        const self = this
        wx.chooseLocation({
          success(res) {
            self.place = res.address
            self.$apply()
          }
        })
      },
      inputTitle(e) {
        this.title = e.detail
      },
      addPic() {
        const self = this
        wx.chooseImage({
          count: 1,
          sizeType: ['original', 'compressed'],
          sourceType: ['album', 'camera'],
          success(res) {
            // tempFilePath可以作为img标签的src属性显示图片
            const tempFilePaths = res.tempFilePaths
            self.pic = tempFilePaths[0]
            self.showBroad = true
            self.$apply()
            self.drawCanvas()
          }
        })
      },
      selectBadge(e) {
        this.selectedBadge = Number(e.currentTarget.id)
        this.drawCanvas()
      },
      submit() {
        const self = this
        const isValid = this.title && this.place && this.selectedCat && this.selectedTime && this.pic
        if (isValid) {
          this.loading = true
          const db = wx.cloud.database()
          wx.cloud.uploadFile({
            cloudPath: Math.random() * 1000000 + this.pic.match(/\.[^.]+?$/)[0], // 上传至云端的路径
            filePath: this.pic, // 小程序临时文件路径
            success: res => {
              // 返回文件 ID
              self.pic = res.fileID
              self.$apply()
              db.collection('panels').add({
                data: {
                  title: self.title,
                  place: self.place,
                  cat: self.selectedCat,
                  date: self.selectedTime,
                  img: self.pic
                }
              }).then(() => {
                self.loading = false
                self.$apply()
                Toast.success({
                  message: '发布成功',
                  duration: 1500
                })
                setTimeout(() => {
                  wx.reLaunch({
                    url: '/pages/index'
                  })
                }, 1600)
              })
            }
          })
        } else {
          Toast.fail({
            message: '请填写完表单',
            duration: 1500
          })
        }
      }
    }

    onLoad() {
    }

    drawCanvas() {
      const self = this
      const ctx = wx.createCanvasContext('myCanvas')
      ctx.drawImage(this.pic, 0, 0, 320, 240)
      ctx.drawImage(this.badges[this.selectedBadge], 240, 160, 80, 80)
      ctx.draw(false, e => {
        wx.canvasToTempFilePath({
          x: 0,
          y: 0,
          width: 320,
          height: 240,
          canvasId: 'myCanvas',
          success(res) {
            self.pic = res.tempFilePath
            self.$apply()
          }
        })
      })
    }
  }
</script>
